{"version":3,"sources":["Context/AppContext.js","Context/ContextProvider.js","components/NameInput.jsx","components/DisplayName.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","AppContextProvider","props","useState","name","setName","Provider","value","children","NameInput","useContext","type","onChange","e","target","DisplayName","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAKeA,EAFIC,IAAMC,gBCaVC,EAXY,SAAAC,GAAU,IAAD,EACVC,mBAAS,IADC,mBAC3BC,EAD2B,KACrBC,EADqB,KAGlC,OAEE,kBAAC,EAAWC,SAAZ,CAAqBC,MAAO,CAAEH,OAAMC,YACjCH,EAAMM,WCRE,SAASC,IAAa,IAAD,EACRC,qBAAWZ,GAA7BM,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,QACd,OACE,6BACE,oDACA,2BAAOM,KAAK,OAAOJ,MAAOH,EAAMQ,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOP,WCLvD,SAASQ,IAAe,IAC7BX,EAASM,qBAAWZ,GAApBM,KACR,OAAO,6CAAmBA,G,MCgBbY,MAdf,WACE,OACE,yBAAKC,UAAU,cACb,kBAAC,EAAD,KAEE,kBAACF,EAAD,MAGA,kBAACN,EAAD,SCHYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a05311b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//建立 Context\r\nconst AppContext = React.createContext();\r\n\r\nexport default AppContext;\r\n","import React, { useState } from \"react\";\r\n\r\nimport AppContext from \"./AppContext\";\r\n\r\n// 設計Provider\r\nconst AppContextProvider = props => {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  return (\r\n    //這Provider提供 name 跟 setName 給子組件用(子組件可用 useContext獲取)\r\n    <AppContext.Provider value={{ name, setName }}>\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AppContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../Context/AppContext\";\r\n\r\nexport default function NameInput() {\r\n  const { name, setName } = useContext(AppContext);\r\n  return (\r\n    <div>\r\n      <h2>Name Input Component</h2>\r\n      <input type=\"text\" value={name} onChange={e => setName(e.target.value)} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../Context/AppContext\";\r\n\r\nexport default function DisplayName() {\r\n  const { name } = useContext(AppContext);\r\n  return <h1>Display Hello {name}</h1>;\r\n}\r\n","import React from \"react\";\nimport AppContextProvider from \"./Context/ContextProvider\";\n\nimport NameInput from \"./components/NameInput\";\nimport DisplayName from \"./components/DisplayName\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n      <AppContextProvider>\n        {/* Display Name */}\n        <DisplayName></DisplayName>\n\n        {/* Name Input */}\n        <NameInput></NameInput>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}